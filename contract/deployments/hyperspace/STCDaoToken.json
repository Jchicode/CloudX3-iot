{
  "address": "0xCe76ab89Cac76d67Bd43Ed901AE6544b03103a63",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_idToApiOrder",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "daoId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCalls",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingCalls",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "buyerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_remainingCalls",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_userOrderIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "daoId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "marketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalCalls",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "orderPrice",
          "type": "uint256"
        }
      ],
      "name": "createOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUserAllOrders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "daoId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "marketId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCalls",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "remainingCalls",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "orderPrice",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyerAddress",
              "type": "address"
            }
          ],
          "internalType": "struct STCDaoToken.ApiOrder[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "daoId",
          "type": "uint256"
        }
      ],
      "name": "getUserAllOrdersOnDao",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "daoId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "marketId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalCalls",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "remainingCalls",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "orderPrice",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyerAddress",
              "type": "address"
            }
          ],
          "internalType": "struct STCDaoToken.ApiOrder[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x07268ff4a0e7177c242bcf01bd0b0641eabcb4de60cfff1ce9d8cf1f9b857dbe",
  "receipt": {
    "to": null,
    "from": "0x72Cd49C4434b583a5f09d10FCe91443554706316",
    "contractAddress": "0xCe76ab89Cac76d67Bd43Ed901AE6544b03103a63",
    "transactionIndex": 0,
    "gasUsed": "85589309",
    "logsBloom": "0x052000010c108004814410441009c20004300200c0001406018ca0044400508c00809a08420581020020000b9020a881006101500440124008200859837ea400400000008000409b4812120c0690018000010401000e300c0020100150d0418819002b0043040002200a0049000148900088080058422084200a2158d39110c0c806090000910000150080004b00240810500020019a8435234200524480c0000203104088204085440b411020040008002c8010080801d80ea02014108408200110040200105204021882e00814f30808348000b018003011004404044060000014610008802038104a220269aa2b3025410062019800148104190818400144",
    "blockHash": "0xf5e8a0a3f1b474d7fda8c1a19b4fe7483b50349965904f40e4d4b3224b7f89c3",
    "transactionHash": "0x07268ff4a0e7177c242bcf01bd0b0641eabcb4de60cfff1ce9d8cf1f9b857dbe",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 233195,
        "transactionHash": "0x07268ff4a0e7177c242bcf01bd0b0641eabcb4de60cfff1ce9d8cf1f9b857dbe",
        "address": "0xCe76ab89Cac76d67Bd43Ed901AE6544b03103a63",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000072cd49c4434b583a5f09d10fce91443554706316"
        ],
        "data": "0x00000000000000000000000000000000000000000052b7d2dcc80cd2e4000000",
        "logIndex": 0,
        "blockHash": "0xf5e8a0a3f1b474d7fda8c1a19b4fe7483b50349965904f40e4d4b3224b7f89c3"
      }
    ],
    "blockNumber": 233195,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c35f864b92a9324d0d4a523f7f19d140",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_idToApiOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCalls\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingCalls\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_remainingCalls\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_userOrderIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daoId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCalls\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderPrice\",\"type\":\"uint256\"}],\"name\":\"createOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUserAllOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCalls\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingCalls\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"}],\"internalType\":\"struct STCDaoToken.ApiOrder[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daoId\",\"type\":\"uint256\"}],\"name\":\"getUserAllOrdersOnDao\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalCalls\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingCalls\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"orderPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"}],\"internalType\":\"struct STCDaoToken.ApiOrder[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/STCMarketToken.sol\":\"STCDaoToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/STCMarketToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n\\ncontract STCDaoToken is ERC20 {\\n  using Counters for Counters.Counter;\\n  Counters.Counter private _orderIdCounter;\\n\\n  struct ApiOrder {\\n    uint256 orderId;\\n    uint256 daoId;\\n    uint256 marketId;\\n    uint256 totalCalls;     // Number of API calls\\n    uint256 remainingCalls;\\n    uint256 orderPrice;\\n    address buyerAddress;\\n  }\\n\\n  mapping(uint256 => ApiOrder) public _idToApiOrder;\\n\\n  mapping(address => uint256[]) public _userOrderIds;  // User's order list\\n\\n  mapping(uint256 => uint256) public _remainingCalls; // mapping(orderId => remainCalls)\\n\\n  constructor() ERC20(\\\"STCDao\\\", \\\"STCT\\\") {\\n    _mint(msg.sender, 100000000 * 10 ** decimals());\\n    _orderIdCounter.increment();\\n  }\\n\\n  function createOrder(uint256 daoId, uint256 marketId, uint256 totalCalls, uint256 orderPrice) external {\\n    uint256 orderId = _orderIdCounter.current();\\n    _orderIdCounter.increment();\\n    _idToApiOrder[daoId] = ApiOrder(orderId, daoId, marketId, totalCalls, totalCalls, orderPrice, msg.sender);\\n    _remainingCalls[marketId] = totalCalls;\\n    _userOrderIds[msg.sender].push(orderId);\\n  }\\n\\n  function getUserAllOrdersOnDao(uint256 daoId) external view returns (ApiOrder[] memory) {\\n    uint256 userOrderCount = _userOrderIds[msg.sender].length;\\n    uint256 orderId;\\n    ApiOrder[] memory orders = new ApiOrder[](userOrderCount);\\n    ApiOrder[] memory order;\\n    uint256 orderCounters = 0;\\n\\n    for (uint i = 0; i < userOrderCount; i++){\\n      orderId = _userOrderIds[msg.sender][i];\\n      if (_idToApiOrder[orderId].daoId == daoId){\\n        orders[orderCounters] = _idToApiOrder[orderId];\\n        orders[orderCounters].remainingCalls = _remainingCalls[orders[i].orderId];\\n        orderCounters = orderCounters + 1;\\n      }\\n    }\\n    return orders;\\n  }\\n\\n  function getUserAllOrders() external view returns (ApiOrder[] memory) {\\n    uint256 userOrderCount = _userOrderIds[msg.sender].length;\\n    ApiOrder[] memory orders = new ApiOrder[](userOrderCount);\\n\\n    for (uint i = 0; i < userOrderCount; i++){\\n      orders[i] = _idToApiOrder[_userOrderIds[msg.sender][i]];\\n      orders[i].remainingCalls = _remainingCalls[orders[i].orderId];\\n    }\\n    return orders;\\n  }\\n}\\n\",\"keccak256\":\"0x7ab1972c7a486e7d8b0f9a1049cf435666595cea7680cbb78ff39c4b33361cdb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280600681526020017f53544344616f00000000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f535443540000000000000000000000000000000000000000000000000000000081525081600390816200008f919062000511565b508060049081620000a1919062000511565b505050620000e433620000b96200010160201b60201c565b600a620000c7919062000788565b6305f5e100620000d89190620007d9565b6200010a60201b60201c565b620000fb60056200027760201b62000df01760201c565b62000910565b60006012905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036200017c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001739062000885565b60405180910390fd5b62000190600083836200028d60201b60201c565b8060026000828254620001a49190620008a7565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620002579190620008f3565b60405180910390a362000273600083836200029260201b60201c565b5050565b6001816000016000828254019250508190555050565b505050565b505050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200031957607f821691505b6020821081036200032f576200032e620002d1565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003997fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200035a565b620003a586836200035a565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003f2620003ec620003e684620003bd565b620003c7565b620003bd565b9050919050565b6000819050919050565b6200040e83620003d1565b620004266200041d82620003f9565b84845462000367565b825550505050565b600090565b6200043d6200042e565b6200044a81848462000403565b505050565b5b8181101562000472576200046660008262000433565b60018101905062000450565b5050565b601f821115620004c1576200048b8162000335565b62000496846200034a565b81016020851015620004a6578190505b620004be620004b5856200034a565b8301826200044f565b50505b505050565b600082821c905092915050565b6000620004e660001984600802620004c6565b1980831691505092915050565b6000620005018383620004d3565b9150826002028217905092915050565b6200051c8262000297565b67ffffffffffffffff811115620005385762000537620002a2565b5b62000544825462000300565b6200055182828562000476565b600060209050601f83116001811462000589576000841562000574578287015190505b620005808582620004f3565b865550620005f0565b601f198416620005998662000335565b60005b82811015620005c3578489015182556001820191506020850194506020810190506200059c565b86831015620005e35784890151620005df601f891682620004d3565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b600185111562000686578086048111156200065e576200065d620005f8565b5b60018516156200066e5780820291505b80810290506200067e8562000627565b94506200063e565b94509492505050565b600082620006a1576001905062000774565b81620006b1576000905062000774565b8160018114620006ca5760028114620006d5576200070b565b600191505062000774565b60ff841115620006ea57620006e9620005f8565b5b8360020a915084821115620007045762000703620005f8565b5b5062000774565b5060208310610133831016604e8410600b8410161715620007455782820a9050838111156200073f576200073e620005f8565b5b62000774565b62000754848484600162000634565b925090508184048111156200076e576200076d620005f8565b5b81810290505b9392505050565b600060ff82169050919050565b60006200079582620003bd565b9150620007a2836200077b565b9250620007d17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846200068f565b905092915050565b6000620007e682620003bd565b9150620007f383620003bd565b92508282026200080381620003bd565b915082820484148315176200081d576200081c620005f8565b5b5092915050565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006200086d601f8362000824565b91506200087a8262000835565b602082019050919050565b60006020820190508181036000830152620008a0816200085e565b9050919050565b6000620008b482620003bd565b9150620008c183620003bd565b9250828201905080821115620008dc57620008db620005f8565b5b92915050565b620008ed81620003bd565b82525050565b60006020820190506200090a6000830184620008e2565b92915050565b611e2c80620009206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a2578063a457c2d711610071578063a457c2d7146102fa578063a557c4dc1461032a578063a9059cbb1461035a578063ce26651c1461038a578063dd62ed3e146103a85761010b565b806370a082311461026057806372b252cd1461029057806380148f96146102c057806395d89b41146102dc5761010b565b8063313ce567116100de578063313ce567146101ac57806339509351146101ca578063411c6d28146101fa578063684d0118146102305761010b565b806306fdde0314610110578063095ea7b31461012e57806318160ddd1461015e57806323b872dd1461017c575b600080fd5b6101186103d8565b60405161012591906113d4565b60405180910390f35b6101486004803603810190610143919061148f565b61046a565b60405161015591906114ea565b60405180910390f35b61016661048d565b6040516101739190611514565b60405180910390f35b6101966004803603810190610191919061152f565b610497565b6040516101a391906114ea565b60405180910390f35b6101b46104c6565b6040516101c1919061159e565b60405180910390f35b6101e460048036038101906101df919061148f565b6104cf565b6040516101f191906114ea565b60405180910390f35b610214600480360381019061020f91906115b9565b610506565b60405161022797969594939291906115f5565b60405180910390f35b61024a6004803603810190610245919061148f565b610568565b6040516102579190611514565b60405180910390f35b61027a60048036038101906102759190611664565b610599565b6040516102879190611514565b60405180910390f35b6102aa60048036038101906102a591906115b9565b6105e1565b6040516102b791906117ec565b60405180910390f35b6102da60048036038101906102d5919061180e565b610860565b005b6102e46109df565b6040516102f191906113d4565b60405180910390f35b610314600480360381019061030f919061148f565b610a71565b60405161032191906114ea565b60405180910390f35b610344600480360381019061033f91906115b9565b610ae8565b6040516103519190611514565b60405180910390f35b610374600480360381019061036f919061148f565b610b00565b60405161038191906114ea565b60405180910390f35b610392610b23565b60405161039f91906117ec565b60405180910390f35b6103c260048036038101906103bd9190611875565b610d69565b6040516103cf9190611514565b60405180910390f35b6060600380546103e7906118e4565b80601f0160208091040260200160405190810160405280929190818152602001828054610413906118e4565b80156104605780601f1061043557610100808354040283529160200191610460565b820191906000526020600020905b81548152906001019060200180831161044357829003601f168201915b5050505050905090565b600080610475610e06565b9050610482818585610e0e565b600191505092915050565b6000600254905090565b6000806104a2610e06565b90506104af858285610fd7565b6104ba858585611063565b60019150509392505050565b60006012905090565b6000806104da610e06565b90506104fb8185856104ec8589610d69565b6104f69190611944565b610e0e565b600191505092915050565b60066020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050154908060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905087565b6007602052816000526040600020818154811061058457600080fd5b90600052602060002001600091509150505481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905090506000808267ffffffffffffffff81111561064757610646611978565b5b60405190808252806020026020018201604052801561068057816020015b61066d6112f1565b8152602001906001900390816106655790505b50905060606000805b8581101561085257600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081815481106106e2576106e16119a7565b5b906000526020600020015494508760066000878152602001908152602001600020600101540361083f57600660008681526020019081526020016000206040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250508483815181106107cf576107ce6119a7565b5b6020026020010181905250600860008583815181106107f1576107f06119a7565b5b60200260200101516000015181526020019081526020016000205484838151811061081f5761081e6119a7565b5b6020026020010151608001818152505060018261083c9190611944565b91505b808061084a906119d6565b915050610689565b508295505050505050919050565b600061086c60056112d9565b90506108786005610df0565b6040518060e001604052808281526020018681526020018581526020018481526020018481526020018381526020013373ffffffffffffffffffffffffffffffffffffffff1681525060066000878152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050826008600086815260200190815260200160002081905550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150555050505050565b6060600480546109ee906118e4565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1a906118e4565b8015610a675780601f10610a3c57610100808354040283529160200191610a67565b820191906000526020600020905b815481529060010190602001808311610a4a57829003601f168201915b5050505050905090565b600080610a7c610e06565b90506000610a8a8286610d69565b905083811015610acf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac690611a90565b60405180910390fd5b610adc8286868403610e0e565b60019250505092915050565b60086020528060005260406000206000915090505481565b600080610b0b610e06565b9050610b18818585611063565b600191505092915050565b60606000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905060008167ffffffffffffffff811115610b8857610b87611978565b5b604051908082528060200260200182016040528015610bc157816020015b610bae6112f1565b815260200190600190039081610ba65790505b50905060005b82811015610d605760066000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110610c2457610c236119a7565b5b906000526020600020015481526020019081526020016000206040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050828281518110610ced57610cec6119a7565b5b602002602001018190525060086000838381518110610d0f57610d0e6119a7565b5b602002602001015160000151815260200190815260200160002054828281518110610d3d57610d3c6119a7565b5b602002602001015160800181815250508080610d58906119d6565b915050610bc7565b50809250505090565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6001816000016000828254019250508190555050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610e7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7490611b22565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610eec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee390611bb4565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610fca9190611514565b60405180910390a3505050565b6000610fe38484610d69565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461105d578181101561104f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104690611c20565b60405180910390fd5b61105c8484848403610e0e565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036110d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c990611cb2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611141576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113890611d44565b60405180910390fd5b61114c8383836112e7565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156111d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c990611dd6565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516112c09190611514565b60405180910390a36112d38484846112ec565b50505050565b600081600001549050919050565b505050565b505050565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600081519050919050565b600082825260208201905092915050565b60005b8381101561137e578082015181840152602081019050611363565b60008484015250505050565b6000601f19601f8301169050919050565b60006113a682611344565b6113b0818561134f565b93506113c0818560208601611360565b6113c98161138a565b840191505092915050565b600060208201905081810360008301526113ee818461139b565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611426826113fb565b9050919050565b6114368161141b565b811461144157600080fd5b50565b6000813590506114538161142d565b92915050565b6000819050919050565b61146c81611459565b811461147757600080fd5b50565b60008135905061148981611463565b92915050565b600080604083850312156114a6576114a56113f6565b5b60006114b485828601611444565b92505060206114c58582860161147a565b9150509250929050565b60008115159050919050565b6114e4816114cf565b82525050565b60006020820190506114ff60008301846114db565b92915050565b61150e81611459565b82525050565b60006020820190506115296000830184611505565b92915050565b600080600060608486031215611548576115476113f6565b5b600061155686828701611444565b935050602061156786828701611444565b92505060406115788682870161147a565b9150509250925092565b600060ff82169050919050565b61159881611582565b82525050565b60006020820190506115b3600083018461158f565b92915050565b6000602082840312156115cf576115ce6113f6565b5b60006115dd8482850161147a565b91505092915050565b6115ef8161141b565b82525050565b600060e08201905061160a600083018a611505565b6116176020830189611505565b6116246040830188611505565b6116316060830187611505565b61163e6080830186611505565b61164b60a0830185611505565b61165860c08301846115e6565b98975050505050505050565b60006020828403121561167a576116796113f6565b5b600061168884828501611444565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6116c681611459565b82525050565b6116d58161141b565b82525050565b60e0820160008201516116f160008501826116bd565b50602082015161170460208501826116bd565b50604082015161171760408501826116bd565b50606082015161172a60608501826116bd565b50608082015161173d60808501826116bd565b5060a082015161175060a08501826116bd565b5060c082015161176360c08501826116cc565b50505050565b600061177583836116db565b60e08301905092915050565b6000602082019050919050565b600061179982611691565b6117a3818561169c565b93506117ae836116ad565b8060005b838110156117df5781516117c68882611769565b97506117d183611781565b9250506001810190506117b2565b5085935050505092915050565b60006020820190508181036000830152611806818461178e565b905092915050565b60008060008060808587031215611828576118276113f6565b5b60006118368782880161147a565b94505060206118478782880161147a565b93505060406118588782880161147a565b92505060606118698782880161147a565b91505092959194509250565b6000806040838503121561188c5761188b6113f6565b5b600061189a85828601611444565b92505060206118ab85828601611444565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806118fc57607f821691505b60208210810361190f5761190e6118b5565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061194f82611459565b915061195a83611459565b925082820190508082111561197257611971611915565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006119e182611459565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611a1357611a12611915565b5b600182019050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611a7a60258361134f565b9150611a8582611a1e565b604082019050919050565b60006020820190508181036000830152611aa981611a6d565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611b0c60248361134f565b9150611b1782611ab0565b604082019050919050565b60006020820190508181036000830152611b3b81611aff565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000611b9e60228361134f565b9150611ba982611b42565b604082019050919050565b60006020820190508181036000830152611bcd81611b91565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611c0a601d8361134f565b9150611c1582611bd4565b602082019050919050565b60006020820190508181036000830152611c3981611bfd565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611c9c60258361134f565b9150611ca782611c40565b604082019050919050565b60006020820190508181036000830152611ccb81611c8f565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611d2e60238361134f565b9150611d3982611cd2565b604082019050919050565b60006020820190508181036000830152611d5d81611d21565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000611dc060268361134f565b9150611dcb82611d64565b604082019050919050565b60006020820190508181036000830152611def81611db3565b905091905056fea26469706673582212201f397d5b6e88e07edfd736ec11ce7ee55b04aecf68f0b62a8493f78c8749273664736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a2578063a457c2d711610071578063a457c2d7146102fa578063a557c4dc1461032a578063a9059cbb1461035a578063ce26651c1461038a578063dd62ed3e146103a85761010b565b806370a082311461026057806372b252cd1461029057806380148f96146102c057806395d89b41146102dc5761010b565b8063313ce567116100de578063313ce567146101ac57806339509351146101ca578063411c6d28146101fa578063684d0118146102305761010b565b806306fdde0314610110578063095ea7b31461012e57806318160ddd1461015e57806323b872dd1461017c575b600080fd5b6101186103d8565b60405161012591906113d4565b60405180910390f35b6101486004803603810190610143919061148f565b61046a565b60405161015591906114ea565b60405180910390f35b61016661048d565b6040516101739190611514565b60405180910390f35b6101966004803603810190610191919061152f565b610497565b6040516101a391906114ea565b60405180910390f35b6101b46104c6565b6040516101c1919061159e565b60405180910390f35b6101e460048036038101906101df919061148f565b6104cf565b6040516101f191906114ea565b60405180910390f35b610214600480360381019061020f91906115b9565b610506565b60405161022797969594939291906115f5565b60405180910390f35b61024a6004803603810190610245919061148f565b610568565b6040516102579190611514565b60405180910390f35b61027a60048036038101906102759190611664565b610599565b6040516102879190611514565b60405180910390f35b6102aa60048036038101906102a591906115b9565b6105e1565b6040516102b791906117ec565b60405180910390f35b6102da60048036038101906102d5919061180e565b610860565b005b6102e46109df565b6040516102f191906113d4565b60405180910390f35b610314600480360381019061030f919061148f565b610a71565b60405161032191906114ea565b60405180910390f35b610344600480360381019061033f91906115b9565b610ae8565b6040516103519190611514565b60405180910390f35b610374600480360381019061036f919061148f565b610b00565b60405161038191906114ea565b60405180910390f35b610392610b23565b60405161039f91906117ec565b60405180910390f35b6103c260048036038101906103bd9190611875565b610d69565b6040516103cf9190611514565b60405180910390f35b6060600380546103e7906118e4565b80601f0160208091040260200160405190810160405280929190818152602001828054610413906118e4565b80156104605780601f1061043557610100808354040283529160200191610460565b820191906000526020600020905b81548152906001019060200180831161044357829003601f168201915b5050505050905090565b600080610475610e06565b9050610482818585610e0e565b600191505092915050565b6000600254905090565b6000806104a2610e06565b90506104af858285610fd7565b6104ba858585611063565b60019150509392505050565b60006012905090565b6000806104da610e06565b90506104fb8185856104ec8589610d69565b6104f69190611944565b610e0e565b600191505092915050565b60066020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050154908060060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905087565b6007602052816000526040600020818154811061058457600080fd5b90600052602060002001600091509150505481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905090506000808267ffffffffffffffff81111561064757610646611978565b5b60405190808252806020026020018201604052801561068057816020015b61066d6112f1565b8152602001906001900390816106655790505b50905060606000805b8581101561085257600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081815481106106e2576106e16119a7565b5b906000526020600020015494508760066000878152602001908152602001600020600101540361083f57600660008681526020019081526020016000206040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250508483815181106107cf576107ce6119a7565b5b6020026020010181905250600860008583815181106107f1576107f06119a7565b5b60200260200101516000015181526020019081526020016000205484838151811061081f5761081e6119a7565b5b6020026020010151608001818152505060018261083c9190611944565b91505b808061084a906119d6565b915050610689565b508295505050505050919050565b600061086c60056112d9565b90506108786005610df0565b6040518060e001604052808281526020018681526020018581526020018481526020018481526020018381526020013373ffffffffffffffffffffffffffffffffffffffff1681525060066000878152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050826008600086815260200190815260200160002081905550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150555050505050565b6060600480546109ee906118e4565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1a906118e4565b8015610a675780601f10610a3c57610100808354040283529160200191610a67565b820191906000526020600020905b815481529060010190602001808311610a4a57829003601f168201915b5050505050905090565b600080610a7c610e06565b90506000610a8a8286610d69565b905083811015610acf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac690611a90565b60405180910390fd5b610adc8286868403610e0e565b60019250505092915050565b60086020528060005260406000206000915090505481565b600080610b0b610e06565b9050610b18818585611063565b600191505092915050565b60606000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905060008167ffffffffffffffff811115610b8857610b87611978565b5b604051908082528060200260200182016040528015610bc157816020015b610bae6112f1565b815260200190600190039081610ba65790505b50905060005b82811015610d605760066000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110610c2457610c236119a7565b5b906000526020600020015481526020019081526020016000206040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050828281518110610ced57610cec6119a7565b5b602002602001018190525060086000838381518110610d0f57610d0e6119a7565b5b602002602001015160000151815260200190815260200160002054828281518110610d3d57610d3c6119a7565b5b602002602001015160800181815250508080610d58906119d6565b915050610bc7565b50809250505090565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6001816000016000828254019250508190555050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610e7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7490611b22565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610eec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee390611bb4565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610fca9190611514565b60405180910390a3505050565b6000610fe38484610d69565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461105d578181101561104f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104690611c20565b60405180910390fd5b61105c8484848403610e0e565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036110d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c990611cb2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611141576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113890611d44565b60405180910390fd5b61114c8383836112e7565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156111d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c990611dd6565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516112c09190611514565b60405180910390a36112d38484846112ec565b50505050565b600081600001549050919050565b505050565b505050565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b600081519050919050565b600082825260208201905092915050565b60005b8381101561137e578082015181840152602081019050611363565b60008484015250505050565b6000601f19601f8301169050919050565b60006113a682611344565b6113b0818561134f565b93506113c0818560208601611360565b6113c98161138a565b840191505092915050565b600060208201905081810360008301526113ee818461139b565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611426826113fb565b9050919050565b6114368161141b565b811461144157600080fd5b50565b6000813590506114538161142d565b92915050565b6000819050919050565b61146c81611459565b811461147757600080fd5b50565b60008135905061148981611463565b92915050565b600080604083850312156114a6576114a56113f6565b5b60006114b485828601611444565b92505060206114c58582860161147a565b9150509250929050565b60008115159050919050565b6114e4816114cf565b82525050565b60006020820190506114ff60008301846114db565b92915050565b61150e81611459565b82525050565b60006020820190506115296000830184611505565b92915050565b600080600060608486031215611548576115476113f6565b5b600061155686828701611444565b935050602061156786828701611444565b92505060406115788682870161147a565b9150509250925092565b600060ff82169050919050565b61159881611582565b82525050565b60006020820190506115b3600083018461158f565b92915050565b6000602082840312156115cf576115ce6113f6565b5b60006115dd8482850161147a565b91505092915050565b6115ef8161141b565b82525050565b600060e08201905061160a600083018a611505565b6116176020830189611505565b6116246040830188611505565b6116316060830187611505565b61163e6080830186611505565b61164b60a0830185611505565b61165860c08301846115e6565b98975050505050505050565b60006020828403121561167a576116796113f6565b5b600061168884828501611444565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6116c681611459565b82525050565b6116d58161141b565b82525050565b60e0820160008201516116f160008501826116bd565b50602082015161170460208501826116bd565b50604082015161171760408501826116bd565b50606082015161172a60608501826116bd565b50608082015161173d60808501826116bd565b5060a082015161175060a08501826116bd565b5060c082015161176360c08501826116cc565b50505050565b600061177583836116db565b60e08301905092915050565b6000602082019050919050565b600061179982611691565b6117a3818561169c565b93506117ae836116ad565b8060005b838110156117df5781516117c68882611769565b97506117d183611781565b9250506001810190506117b2565b5085935050505092915050565b60006020820190508181036000830152611806818461178e565b905092915050565b60008060008060808587031215611828576118276113f6565b5b60006118368782880161147a565b94505060206118478782880161147a565b93505060406118588782880161147a565b92505060606118698782880161147a565b91505092959194509250565b6000806040838503121561188c5761188b6113f6565b5b600061189a85828601611444565b92505060206118ab85828601611444565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806118fc57607f821691505b60208210810361190f5761190e6118b5565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061194f82611459565b915061195a83611459565b925082820190508082111561197257611971611915565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006119e182611459565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611a1357611a12611915565b5b600182019050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611a7a60258361134f565b9150611a8582611a1e565b604082019050919050565b60006020820190508181036000830152611aa981611a6d565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611b0c60248361134f565b9150611b1782611ab0565b604082019050919050565b60006020820190508181036000830152611b3b81611aff565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000611b9e60228361134f565b9150611ba982611b42565b604082019050919050565b60006020820190508181036000830152611bcd81611b91565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000611c0a601d8361134f565b9150611c1582611bd4565b602082019050919050565b60006020820190508181036000830152611c3981611bfd565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611c9c60258361134f565b9150611ca782611c40565b604082019050919050565b60006020820190508181036000830152611ccb81611c8f565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611d2e60238361134f565b9150611d3982611cd2565b604082019050919050565b60006020820190508181036000830152611d5d81611d21565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000611dc060268361134f565b9150611dcb82611d64565b604082019050919050565b60006020820190508181036000830152611def81611db3565b905091905056fea26469706673582212201f397d5b6e88e07edfd736ec11ce7ee55b04aecf68f0b62a8493f78c8749273664736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15,
        "contract": "contracts/STCMarketToken.sol:STCDaoToken",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 21,
        "contract": "contracts/STCMarketToken.sol:STCDaoToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 23,
        "contract": "contracts/STCMarketToken.sol:STCDaoToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 25,
        "contract": "contracts/STCMarketToken.sol:STCDaoToken",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/STCMarketToken.sol:STCDaoToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 4066,
        "contract": "contracts/STCMarketToken.sol:STCDaoToken",
        "label": "_orderIdCounter",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Counter)2260_storage"
      },
      {
        "astId": 4086,
        "contract": "contracts/STCMarketToken.sol:STCDaoToken",
        "label": "_idToApiOrder",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(ApiOrder)4081_storage)"
      },
      {
        "astId": 4091,
        "contract": "contracts/STCMarketToken.sol:STCDaoToken",
        "label": "_userOrderIds",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 4095,
        "contract": "contracts/STCMarketToken.sol:STCDaoToken",
        "label": "_remainingCalls",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(ApiOrder)4081_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct STCDaoToken.ApiOrder)",
        "numberOfBytes": "32",
        "value": "t_struct(ApiOrder)4081_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ApiOrder)4081_storage": {
        "encoding": "inplace",
        "label": "struct STCDaoToken.ApiOrder",
        "members": [
          {
            "astId": 4068,
            "contract": "contracts/STCMarketToken.sol:STCDaoToken",
            "label": "orderId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4070,
            "contract": "contracts/STCMarketToken.sol:STCDaoToken",
            "label": "daoId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4072,
            "contract": "contracts/STCMarketToken.sol:STCDaoToken",
            "label": "marketId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4074,
            "contract": "contracts/STCMarketToken.sol:STCDaoToken",
            "label": "totalCalls",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4076,
            "contract": "contracts/STCMarketToken.sol:STCDaoToken",
            "label": "remainingCalls",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 4078,
            "contract": "contracts/STCMarketToken.sol:STCDaoToken",
            "label": "orderPrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4080,
            "contract": "contracts/STCMarketToken.sol:STCDaoToken",
            "label": "buyerAddress",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Counter)2260_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2259,
            "contract": "contracts/STCMarketToken.sol:STCDaoToken",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}